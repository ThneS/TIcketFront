// Central export for all contract ABIs and address helpers
// Auto-generated by scripts/sync-abis.sh

import eventManagerRaw from './EventManager.json';
import ticketManagerRaw from './TicketManager.json';
import marketplaceRaw from './Marketplace.json';
import platformTokenRaw from './PlatformToken.json';
import tokenSwapRaw from './TokenSwap.json';
import showManagerRaw from './ShowManager.json';
import didRegistryRaw from './DIDRegistry.json';

/**
 * Normalizes imported JSON modules to ensure they are ABI arrays.
 * This prevents "abi.filter is not a function" errors when using viem hooks.
 * 
 * @param mod - The imported JSON module
 * @returns A readonly ABI array
 */
function toAbiArray(mod: unknown): readonly any[] {
  if (Array.isArray(mod)) return mod as readonly any[];
  if (typeof mod === 'object' && mod !== null && 'abi' in mod && Array.isArray(mod.abi)) {
    return mod.abi as readonly any[];
  }
  if (typeof mod === 'object' && mod !== null && 'default' in mod && Array.isArray(mod.default)) {
    return mod.default as readonly any[];
  }
  throw new Error('[ABI normalization] Invalid ABI JSON format: expected array or .abi/.default array');
}

export const ABIS = {
  eventManager: toAbiArray(eventManagerRaw),
  ticketManager: toAbiArray(ticketManagerRaw),
  marketplace: toAbiArray(marketplaceRaw),
  platformToken: toAbiArray(platformTokenRaw),
  tokenSwap: toAbiArray(tokenSwapRaw),
  showManager: toAbiArray(showManagerRaw),
  didRegistry: toAbiArray(didRegistryRaw),
};

export const CONTRACT_ADDRESSES = {
  eventManager: import.meta.env.VITE_EVENT_MANAGER as `0x${string}` | undefined,
  ticketManager: import.meta.env.VITE_TICKET_MANAGER as `0x${string}` | undefined,
  marketplace: import.meta.env.VITE_MARKETPLACE as `0x${string}` | undefined,
  platformToken: import.meta.env.VITE_PLATFORM_TOKEN as `0x${string}` | undefined,
  tokenSwap: import.meta.env.VITE_TOKEN_SWAP as `0x${string}` | undefined,
  showManager: import.meta.env.VITE_SHOW_MANAGER as `0x${string}` | undefined,
  didRegistry: import.meta.env.VITE_DID_REGISTRY as `0x${string}` | undefined,
} as const;

export function getAddress(key: keyof typeof CONTRACT_ADDRESSES, chainId?: number): `0x${string}` | undefined {
  try {
    const mappingRaw = import.meta.env.VITE_CONTRACTS_JSON;
    if (chainId && mappingRaw) {
      const parsed = JSON.parse(mappingRaw);
      const networkConfig = parsed[String(chainId)];
      if (networkConfig) {
        const upper = key.toUpperCase();
        return networkConfig[upper] || networkConfig[key] || CONTRACT_ADDRESSES[key];
      }
    }
    return CONTRACT_ADDRESSES[key];
  } catch (e) {
    console.warn('Failed parsing VITE_CONTRACTS_JSON', e);
    return CONTRACT_ADDRESSES[key];
  }
}
